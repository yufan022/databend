## Copyright 2023 Databend Cloud
##
## Licensed under the Elastic License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     https://www.elastic.co/licensing/elastic-license
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

statement ok
DROP DATABASE IF EXISTS test_index_db

statement ok
CREATE DATABASE test_index_db

statement ok
USE test_index_db

statement ok
DROP TABLE IF EXISTS t1

statement ok
CREATE TABLE t1(a int not null,b int not null) Engine = Fuse

statement ok
DROP AGGREGATING INDEX IF EXISTS idx1

statement ok
CREATE AGGREGATING INDEX idx1 AS SELECT b, SUM(a) FROM t1 WHERE b > 3 GROUP BY b

query T
EXPLAIN SELECT SUM(a), b FROM t1 WHERE b > 3 GROUP BY b
----
AggregateFinal
├── output columns: [SUM(a) (#2), t1.b (#1)]
├── group by: [b]
├── aggregate functions: [sum(a)]
├── estimated rows: 0.00
└── AggregatePartial
    ├── output columns: [SUM(a) (#2), #_group_by_key]
    ├── group by: [b]
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 0.00
    └── Filter
        ├── output columns: [t1.a (#0), t1.b (#1)]
        ├── filters: [t1.b (#1) > 3]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.test_index_db.t1
            ├── output columns: [a (#0), b (#1)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.b (#1) > 3], limit: NONE]
            ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE (b > 3) GROUP BY b]
            ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1)]]
            └── estimated rows: 0.00

query T
EXPLAIN SELECT b FROM t1 WHERE b > 3 GROUP BY b
----
AggregateFinal
├── output columns: [t1.b (#1)]
├── group by: [b]
├── aggregate functions: []
├── estimated rows: 0.00
└── AggregatePartial
    ├── output columns: [#_group_by_key]
    ├── group by: [b]
    ├── aggregate functions: []
    ├── estimated rows: 0.00
    └── Filter
        ├── output columns: [t1.b (#1)]
        ├── filters: [t1.b (#1) > 3]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.test_index_db.t1
            ├── output columns: [b (#1)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.b (#1) > 3], limit: NONE]
            ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE (b > 3) GROUP BY b]
            ├── rewritten query: [selection: [index_col_0 (#0)]]
            └── estimated rows: 0.00

query T
EXPLAIN SELECT SUM(a) + 1 FROM t1 WHERE b > 3 GROUP BY b
----
EvalScalar
├── output columns: [(sum(a) + 1) (#3)]
├── expressions: [SUM(a) (#2) + 1]
├── estimated rows: 0.00
└── AggregateFinal
    ├── output columns: [SUM(a) (#2), t1.b (#1)]
    ├── group by: [b]
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── output columns: [SUM(a) (#2), #_group_by_key]
        ├── group by: [b]
        ├── aggregate functions: [sum(a)]
        ├── estimated rows: 0.00
        └── Filter
            ├── output columns: [t1.a (#0), t1.b (#1)]
            ├── filters: [t1.b (#1) > 3]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.t1
                ├── output columns: [a (#0), b (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [t1.b (#1) > 3], limit: NONE]
                ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE (b > 3) GROUP BY b]
                ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1)]]
                └── estimated rows: 0.00

query T
EXPLAIN SELECT SUM(a) + 1 FROM t1 WHERE b > 5 GROUP BY b
----
EvalScalar
├── output columns: [(sum(a) + 1) (#3)]
├── expressions: [SUM(a) (#2) + 1]
├── estimated rows: 0.00
└── AggregateFinal
    ├── output columns: [SUM(a) (#2), t1.b (#1)]
    ├── group by: [b]
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── output columns: [SUM(a) (#2), #_group_by_key]
        ├── group by: [b]
        ├── aggregate functions: [sum(a)]
        ├── estimated rows: 0.00
        └── Filter
            ├── output columns: [t1.a (#0), t1.b (#1)]
            ├── filters: [t1.b (#1) > 5]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.t1
                ├── output columns: [a (#0), b (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [t1.b (#1) > 5], limit: NONE]
                ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE (b > 3) GROUP BY b]
                ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1)], filter: index_col_0 (#0) > 5]
                └── estimated rows: 0.00

query T
EXPLAIN SELECT t1.b, SUM(a) FROM t1 GROUP BY t1.b HAVING SUM(a)=(SELECT SUM(a) FROM t1 t WHERE t1.b=t.b and t.b > 3)
----
HashJoin
├── output columns: [SUM(a) (#2), t1.b (#1)]
├── join type: INNER
├── build keys: [scalar_subquery_5 (#5), b (#4)]
├── probe keys: [SUM(a) (#2), b (#1)]
├── filters: []
├── estimated rows: 0.00
├── AggregateFinal(Build)
│   ├── output columns: [SUM(a) (#5), t.b (#4)]
│   ├── group by: [b]
│   ├── aggregate functions: [sum(a)]
│   ├── estimated rows: 0.00
│   └── AggregatePartial
│       ├── group by: [b]
│       ├── aggregate functions: [sum(a)]
│       ├── estimated rows: 0.00
│       └── Filter
│           ├── output columns: [t.a (#3), t.b (#4)]
│           ├── filters: [b (#4) > 3]
│           ├── estimated rows: 0.00
│           └── TableScan
│               ├── table: default.test_index_db.t1
│               ├── output columns: [a (#3), b (#4)]
│               ├── read rows: 0
│               ├── read bytes: 0
│               ├── partitions total: 0
│               ├── partitions scanned: 0
│               ├── push downs: [filters: [t1.b (#4) > 3], limit: NONE]
│               ├── aggregating index: [SELECT b, SUM(a) FROM test_index_db.t1 WHERE b > 3 GROUP BY b]
│               ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1)]]
│               └── estimated rows: 0.00
└── AggregateFinal(Probe)
    ├── output columns: [SUM(a) (#2), t1.b (#1)]
    ├── group by: [b]
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── group by: [b]
        ├── aggregate functions: [sum(a)]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.test_index_db.t1
            ├── output columns: [a (#0), b (#1)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 0.00

# Disable aggregating index scan
statement ok
SET enable_aggregating_index_scan = 0

query T
EXPLAIN SELECT SUM(a), b FROM t1 WHERE b > 3 GROUP BY b
----
AggregateFinal
├── output columns: [SUM(a) (#2), t1.b (#1)]
├── group by: [b]
├── aggregate functions: [sum(a)]
├── estimated rows: 0.00
└── AggregatePartial
    ├── output columns: [SUM(a) (#2), #_group_by_key]
    ├── group by: [b]
    ├── aggregate functions: [sum(a)]
    ├── estimated rows: 0.00
    └── Filter
        ├── output columns: [t1.a (#0), t1.b (#1)]
        ├── filters: [t1.b (#1) > 3]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.test_index_db.t1
            ├── output columns: [a (#0), b (#1)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [t1.b (#1) > 3], limit: NONE]
            └── estimated rows: 0.00

statement ok
SET enable_aggregating_index_scan = 1

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE AGGREGATING INDEX idx1 AS SELECT a + 1 from t1

query T
EXPLAIN SELECT avg(a + 1) from t1
----
EvalScalar
├── output columns: [(sum((a + 1)) / if((count((a + 1)) = 0), 1, count((a + 1)))) (#5)]
├── expressions: [sum((a + 1)) (#3) / CAST(if(CAST(count((a + 1)) (#4) = 0 AS Boolean NULL), 1, count((a + 1)) (#4)) AS UInt64 NULL)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── output columns: [sum((a + 1)) (#3), count((a + 1)) (#4)]
    ├── group by: []
    ├── aggregate functions: [sum(sum_arg_0), count()]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── output columns: [sum((a + 1)) (#3), count((a + 1)) (#4)]
        ├── group by: []
        ├── aggregate functions: [sum(sum_arg_0), count()]
        ├── estimated rows: 1.00
        └── EvalScalar
            ├── output columns: [sum_arg_0 (#2)]
            ├── expressions: [t1.a (#0) + 1]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.t1
                ├── output columns: [a (#0)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [], limit: NONE]
                ├── aggregating index: [SELECT (a + 1) FROM test_index_db.t1]
                ├── rewritten query: [selection: [index_col_0 (#0)]]
                └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE AGGREGATING INDEX idx1 AS SELECT avg(a), sum(b) from t1

query T
EXPLAIN SELECT avg(a) from t1
----
EvalScalar
├── output columns: [(sum(a) / if((count(a) = 0), 1, count(a))) (#4)]
├── expressions: [sum(a) (#2) / CAST(if(CAST(count(a) (#3) = 0 AS Boolean NULL), 1, count(a) (#3)) AS UInt64 NULL)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── output columns: [sum(a) (#2), count(a) (#3)]
    ├── group by: []
    ├── aggregate functions: [sum(a), count()]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── output columns: [sum(a) (#2), count(a) (#3)]
        ├── group by: []
        ├── aggregate functions: [sum(a), count()]
        ├── estimated rows: 1.00
        └── TableScan
            ├── table: default.test_index_db.t1
            ├── output columns: [a (#0)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [], limit: NONE]
            ├── aggregating index: [SELECT COUNT(), COUNT(a), SUM(a), SUM(b) FROM test_index_db.t1]
            ├── rewritten query: [selection: [index_col_2 (#2), index_col_0 (#0)]]
            └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE TABLE onebrc (station_name VARCHAR NULL, measurement DOUBLE NULL);

statement ok
CREATE AGGREGATING INDEX idx1 as SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc GROUP BY station_name

query T
EXPLAIN SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc GROUP BY station_name
----
EvalScalar
├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
├── expressions: [sum(measurement) (#6) / CAST(if(CAST(count(measurement) (#7) = 0 AS Boolean NULL), 1, count(measurement) (#7)) AS UInt64 NULL)]
├── estimated rows: 0.00
└── AggregateFinal
    ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), onebrc.station_name (#0)]
    ├── group by: [station_name]
    ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), #_group_by_key]
        ├── group by: [station_name]
        ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.test_index_db.onebrc
            ├── output columns: [station_name (#0), measurement (#1)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [], limit: NONE]
            ├── aggregating index: [SELECT station_name, COUNT(), COUNT(measurement), MAX(measurement), MIN(measurement), SUM(measurement) FROM test_index_db.onebrc GROUP BY station_name]
            ├── rewritten query: [selection: [index_col_0 (#0), index_col_4 (#4), index_col_5 (#5), index_col_2 (#2), index_col_3 (#3)]]
            └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE AGGREGATING INDEX idx1 as SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc GROUP BY station_name

query T
EXPLAIN SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc GROUP BY station_name ORDER BY station_name
----
EvalScalar
├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
├── expressions: [sum(measurement) (#6) / CAST(if(CAST(count(measurement) (#7) = 0 AS Boolean NULL), 1, count(measurement) (#7)) AS UInt64 NULL)]
├── estimated rows: 0.00
└── Sort
    ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), onebrc.station_name (#0)]
    ├── sort keys: [station_name ASC NULLS LAST]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), onebrc.station_name (#0)]
        ├── group by: [station_name]
        ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), #_group_by_key]
            ├── group by: [station_name]
            ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.onebrc
                ├── output columns: [station_name (#0), measurement (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [], limit: NONE]
                ├── aggregating index: [SELECT station_name, COUNT(), COUNT(measurement), MAX(measurement), MIN(measurement), SUM(measurement) FROM test_index_db.onebrc GROUP BY station_name]
                ├── rewritten query: [selection: [index_col_0 (#0), index_col_4 (#4), index_col_5 (#5), index_col_2 (#2), index_col_3 (#3)]]
                └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE AGGREGATING INDEX idx1 as SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc GROUP BY station_name

query T
EXPLAIN SELECT * FROM (SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc GROUP BY station_name) ORDER BY station_name
----
Sort
├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
├── sort keys: [station_name ASC NULLS LAST]
├── estimated rows: 0.00
└── EvalScalar
    ├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
    ├── expressions: [sum(measurement) (#6) / CAST(if(CAST(count(measurement) (#7) = 0 AS Boolean NULL), 1, count(measurement) (#7)) AS UInt64 NULL)]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), onebrc.station_name (#0)]
        ├── group by: [station_name]
        ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), #_group_by_key]
            ├── group by: [station_name]
            ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.onebrc
                ├── output columns: [station_name (#0), measurement (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [], limit: NONE]
                ├── aggregating index: [SELECT station_name, COUNT(), COUNT(measurement), MAX(measurement), MIN(measurement), SUM(measurement) FROM test_index_db.onebrc GROUP BY station_name]
                ├── rewritten query: [selection: [index_col_0 (#0), index_col_4 (#4), index_col_5 (#5), index_col_2 (#2), index_col_3 (#3)]]
                └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE AGGREGATING INDEX idx1 as SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc GROUP BY station_name

query T
EXPLAIN WITH aggi AS (SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc GROUP BY station_name) SELECT * FROM aggi ORDER BY station_name
----
Sort
├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
├── sort keys: [station_name ASC NULLS LAST]
├── estimated rows: 0.00
└── EvalScalar
    ├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
    ├── expressions: [sum(measurement) (#6) / CAST(if(CAST(count(measurement) (#7) = 0 AS Boolean NULL), 1, count(measurement) (#7)) AS UInt64 NULL)]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), onebrc.station_name (#0)]
        ├── group by: [station_name]
        ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), #_group_by_key]
            ├── group by: [station_name]
            ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.test_index_db.onebrc
                ├── output columns: [station_name (#0), measurement (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [], limit: NONE]
                ├── aggregating index: [SELECT station_name, COUNT(), COUNT(measurement), MAX(measurement), MIN(measurement), SUM(measurement) FROM test_index_db.onebrc GROUP BY station_name]
                ├── rewritten query: [selection: [index_col_0 (#0), index_col_4 (#4), index_col_5 (#5), index_col_2 (#2), index_col_3 (#3)]]
                └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

# no predicates but query has predicates
statement ok
CREATE AGGREGATING INDEX idx1 as SELECT station_name, measurement, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc GROUP BY station_name, measurement

query T
EXPLAIN WITH aggi AS (SELECT station_name, measurement, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc WHERE station_name='Beijing' AND measurement > 0 AND measurement IN (1, 2) GROUP BY station_name, measurement) SELECT * FROM aggi ORDER BY station_name
----
Sort
├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), onebrc.measurement (#1), mean_measurement (#9)]
├── sort keys: [station_name ASC NULLS LAST]
├── estimated rows: 0.00
└── EvalScalar
    ├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), onebrc.measurement (#1), mean_measurement (#9)]
    ├── expressions: [sum(measurement) (#6) / CAST(if(CAST(count(measurement) (#7) = 0 AS Boolean NULL), 1, count(measurement) (#7)) AS UInt64 NULL)]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), onebrc.station_name (#0), onebrc.measurement (#1)]
        ├── group by: [station_name, measurement]
        ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), #_group_by_key]
            ├── group by: [station_name, measurement]
            ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
            ├── estimated rows: 0.00
            └── Filter
                ├── output columns: [onebrc.station_name (#0), onebrc.measurement (#1)]
                ├── filters: [is_true(onebrc.measurement (#1) > 0), is_true(onebrc.station_name (#0) = 'Beijing'), is_true(onebrc.measurement (#1) = 1 OR onebrc.measurement (#1) = 2)]
                ├── estimated rows: 0.00
                └── TableScan
                    ├── table: default.test_index_db.onebrc
                    ├── output columns: [station_name (#0), measurement (#1)]
                    ├── read rows: 0
                    ├── read bytes: 0
                    ├── partitions total: 0
                    ├── partitions scanned: 0
                    ├── push downs: [filters: [and_filters(and_filters(onebrc.measurement (#1) > 0, onebrc.station_name (#0) = 'Beijing'), onebrc.measurement (#1) = 1 OR onebrc.measurement (#1) = 2)], limit: NONE]
                    ├── aggregating index: [SELECT station_name, measurement, COUNT(), COUNT(measurement), MAX(measurement), MIN(measurement), SUM(measurement) FROM test_index_db.onebrc GROUP BY station_name, measurement]
                    ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1), index_col_5 (#5), index_col_6 (#6), index_col_3 (#3), index_col_4 (#4)], filter: is_true(CAST(onebrc.station_name (#0) AS Boolean NULL) AND CAST('Beijing' AS Boolean NULL) AND (onebrc.measurement (#1) = CAST(1 AS Float64 NULL) OR onebrc.measurement (#1) = CAST(2 AS Float64 NULL)) AND index_col_1 (#1) > CAST(0 AS Float64 NULL))]
                    └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

# with equal predicates
statement ok
CREATE AGGREGATING INDEX idx1 as SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc WHERE station_name='Beijing' GROUP BY station_name

query T
EXPLAIN WITH aggi AS (SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc WHERE station_name='Beijing' GROUP BY station_name) SELECT * FROM aggi ORDER BY station_name
----
Sort
├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
├── sort keys: [station_name ASC NULLS LAST]
├── estimated rows: 0.00
└── EvalScalar
    ├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
    ├── expressions: [sum(measurement) (#6) / CAST(if(CAST(count(measurement) (#7) = 0 AS Boolean NULL), 1, count(measurement) (#7)) AS UInt64 NULL)]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), onebrc.station_name (#0)]
        ├── group by: [station_name]
        ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), #_group_by_key]
            ├── group by: [station_name]
            ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
            ├── estimated rows: 0.00
            └── Filter
                ├── output columns: [onebrc.station_name (#0), onebrc.measurement (#1)]
                ├── filters: [is_true(onebrc.station_name (#0) = 'Beijing')]
                ├── estimated rows: 0.00
                └── TableScan
                    ├── table: default.test_index_db.onebrc
                    ├── output columns: [station_name (#0), measurement (#1)]
                    ├── read rows: 0
                    ├── read bytes: 0
                    ├── partitions total: 0
                    ├── partitions scanned: 0
                    ├── push downs: [filters: [is_true(onebrc.station_name (#0) = 'Beijing')], limit: NONE]
                    ├── aggregating index: [SELECT station_name, COUNT(), COUNT(measurement), MAX(measurement), MIN(measurement), SUM(measurement) FROM test_index_db.onebrc WHERE (station_name = 'Beijing') GROUP BY station_name]
                    ├── rewritten query: [selection: [index_col_0 (#0), index_col_4 (#4), index_col_5 (#5), index_col_2 (#2), index_col_3 (#3)]]
                    └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

# with range predicates
statement ok
CREATE AGGREGATING INDEX idx1 as SELECT station_name, measurement, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc WHERE measurement > 1 and measurement < 5 GROUP BY station_name, measurement

query T
EXPLAIN WITH aggi AS (SELECT station_name, measurement, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc where measurement > 2 and measurement < 5 GROUP BY station_name, measurement) SELECT * FROM aggi ORDER BY station_name
----
Sort
├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), onebrc.measurement (#1), mean_measurement (#9)]
├── sort keys: [station_name ASC NULLS LAST]
├── estimated rows: 0.00
└── EvalScalar
    ├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), onebrc.measurement (#1), mean_measurement (#9)]
    ├── expressions: [sum(measurement) (#6) / CAST(if(CAST(count(measurement) (#7) = 0 AS Boolean NULL), 1, count(measurement) (#7)) AS UInt64 NULL)]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), onebrc.station_name (#0), onebrc.measurement (#1)]
        ├── group by: [station_name, measurement]
        ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), #_group_by_key]
            ├── group by: [station_name, measurement]
            ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
            ├── estimated rows: 0.00
            └── Filter
                ├── output columns: [onebrc.station_name (#0), onebrc.measurement (#1)]
                ├── filters: [is_true(onebrc.measurement (#1) > 2), is_true(onebrc.measurement (#1) < 5)]
                ├── estimated rows: 0.00
                └── TableScan
                    ├── table: default.test_index_db.onebrc
                    ├── output columns: [station_name (#0), measurement (#1)]
                    ├── read rows: 0
                    ├── read bytes: 0
                    ├── partitions total: 0
                    ├── partitions scanned: 0
                    ├── push downs: [filters: [and_filters(onebrc.measurement (#1) > 2, onebrc.measurement (#1) < 5)], limit: NONE]
                    ├── aggregating index: [SELECT station_name, measurement, COUNT(), COUNT(measurement), MAX(measurement), MIN(measurement), SUM(measurement) FROM test_index_db.onebrc WHERE ((measurement > 1) AND (measurement < 5)) GROUP BY station_name, measurement]
                    ├── rewritten query: [selection: [index_col_0 (#0), index_col_1 (#1), index_col_5 (#5), index_col_6 (#6), index_col_3 (#3), index_col_4 (#4)], filter: is_true(index_col_1 (#1) > CAST(2 AS Float64 NULL) AND index_col_1 (#1) < CAST(5 AS Float64 NULL))]
                    └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

# with other predicates
statement ok
CREATE AGGREGATING INDEX idx1 as SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc WHERE station_name IN ('Paris', 'Beijing') GROUP BY station_name

query T
EXPLAIN WITH aggi AS (SELECT station_name, MIN(measurement) AS min_measurement, AVG(measurement) AS mean_measurement, MAX(measurement) AS max_measurement FROM onebrc WHERE station_name IN ('Paris', 'Beijing') GROUP BY station_name) SELECT * FROM aggi ORDER BY station_name
----
Sort
├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
├── sort keys: [station_name ASC NULLS LAST]
├── estimated rows: 0.00
└── EvalScalar
    ├── output columns: [MIN(measurement) (#5), MAX(measurement) (#8), onebrc.station_name (#0), mean_measurement (#9)]
    ├── expressions: [sum(measurement) (#6) / CAST(if(CAST(count(measurement) (#7) = 0 AS Boolean NULL), 1, count(measurement) (#7)) AS UInt64 NULL)]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), onebrc.station_name (#0)]
        ├── group by: [station_name]
        ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── output columns: [MIN(measurement) (#5), sum(measurement) (#6), count(measurement) (#7), MAX(measurement) (#8), #_group_by_key]
            ├── group by: [station_name]
            ├── aggregate functions: [min(measurement), sum(measurement), count(measurement), max(measurement)]
            ├── estimated rows: 0.00
            └── Filter
                ├── output columns: [onebrc.station_name (#0), onebrc.measurement (#1)]
                ├── filters: [is_true(onebrc.station_name (#0) = 'Paris' OR onebrc.station_name (#0) = 'Beijing')]
                ├── estimated rows: 0.00
                └── TableScan
                    ├── table: default.test_index_db.onebrc
                    ├── output columns: [station_name (#0), measurement (#1)]
                    ├── read rows: 0
                    ├── read bytes: 0
                    ├── partitions total: 0
                    ├── partitions scanned: 0
                    ├── push downs: [filters: [is_true(onebrc.station_name (#0) = 'Paris' OR onebrc.station_name (#0) = 'Beijing')], limit: NONE]
                    ├── aggregating index: [SELECT station_name, COUNT(), COUNT(measurement), MAX(measurement), MIN(measurement), SUM(measurement) FROM test_index_db.onebrc WHERE station_name IN('Paris', 'Beijing') GROUP BY station_name]
                    ├── rewritten query: [selection: [index_col_0 (#0), index_col_4 (#4), index_col_5 (#5), index_col_2 (#2), index_col_3 (#3)]]
                    └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE AGGREGATING INDEX idx1 AS SELECT count(measurement), sum(measurement) from onebrc

query T
EXPLAIN SELECT count(measurement) from onebrc
----
AggregateFinal
├── output columns: [count(measurement) (#2)]
├── group by: []
├── aggregate functions: [count(measurement)]
├── estimated rows: 1.00
└── AggregatePartial
    ├── output columns: [count(measurement) (#2)]
    ├── group by: []
    ├── aggregate functions: [count(measurement)]
    ├── estimated rows: 1.00
    └── TableScan
        ├── table: default.test_index_db.onebrc
        ├── output columns: [measurement (#1)]
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: NONE]
        ├── aggregating index: [SELECT COUNT(), COUNT(measurement), SUM(measurement) FROM test_index_db.onebrc]
        ├── rewritten query: [selection: [index_col_1 (#1)]]
        └── estimated rows: 0.00


statement ok
DROP TABLE IF EXISTS onebrc

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE AGGREGATING INDEX idx1 AS SELECT min(a), max(a), count(*), avg(a) FROM t1 GROUP BY b

query T
EXPLAIN SELECT min(a), max(a), count(*) FROM t1 GROUP BY b
----
AggregateFinal
├── output columns: [min(a) (#2), max(a) (#3), COUNT(*) (#4), t1.b (#1)]
├── group by: [b]
├── aggregate functions: [min(a), max(a), count()]
├── estimated rows: 0.00
└── AggregatePartial
    ├── output columns: [min(a) (#2), max(a) (#3), COUNT(*) (#4), #_group_by_key]
    ├── group by: [b]
    ├── aggregate functions: [min(a), max(a), count()]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.test_index_db.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: NONE]
        ├── aggregating index: [SELECT COUNT(), COUNT(a), MAX(a), MIN(a), SUM(a), b FROM test_index_db.t1 GROUP BY b]
        ├── rewritten query: [selection: [index_col_0 (#0), index_col_4 (#4), index_col_3 (#3), index_col_1 (#1)]]
        └── estimated rows: 0.00


# for sync aggregating index

statement ok
DROP AGGREGATING INDEX idx1

statement ok
CREATE AGGREGATING INDEX idx1 AS SELECT a + 1 from t1

statement ok
INSERT INTO t1 VALUES (1,1), (1,2), (2,4), (2,5)

query T
EXPLAIN SELECT avg(a + 1) from t1
----
EvalScalar
├── output columns: [(sum((a + 1)) / if((count((a + 1)) = 0), 1, count((a + 1)))) (#5)]
├── expressions: [sum((a + 1)) (#3) / CAST(if(CAST(count((a + 1)) (#4) = 0 AS Boolean NULL), 1, count((a + 1)) (#4)) AS UInt64 NULL)]
├── estimated rows: 1.00
└── AggregateFinal
    ├── output columns: [sum((a + 1)) (#3), count((a + 1)) (#4)]
    ├── group by: []
    ├── aggregate functions: [sum(sum_arg_0), count()]
    ├── estimated rows: 1.00
    └── AggregatePartial
        ├── output columns: [sum((a + 1)) (#3), count((a + 1)) (#4)]
        ├── group by: []
        ├── aggregate functions: [sum(sum_arg_0), count()]
        ├── estimated rows: 1.00
        └── EvalScalar
            ├── output columns: [sum_arg_0 (#2)]
            ├── expressions: [t1.a (#0) + 1]
            ├── estimated rows: 4.00
            └── TableScan
                ├── table: default.test_index_db.t1
                ├── output columns: [a (#0)]
                ├── read rows: 4
                ├── read bytes: 47
                ├── partitions total: 1
                ├── partitions scanned: 1
                ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
                ├── push downs: [filters: [], limit: NONE]
                ├── aggregating index: [SELECT (a + 1) FROM test_index_db.t1]
                ├── rewritten query: [selection: [index_col_0 (#0)]]
                └── estimated rows: 4.00

statement ok
truncate table t1

query T
EXPLAIN SELECT b, a + 1 as x from t1 order by x
----
Sort
├── output columns: [t1.b (#1), x (#2)]
├── sort keys: [x ASC NULLS LAST]
├── estimated rows: 0.00
└── EvalScalar
    ├── output columns: [t1.b (#1), x (#2)]
    ├── expressions: [t1.a (#0) + 1]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.test_index_db.t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [], limit: NONE]
        ├── aggregating index: [SELECT (a + 1) FROM test_index_db.t1]
        ├── rewritten query: [selection: [index_col_0 (#0)]]
        └── estimated rows: 0.00

statement ok
DROP AGGREGATING INDEX idx1

statement ok
USE default

statement ok
DROP DATABASE IF EXISTS test_index_db
