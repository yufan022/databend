query T
explain select number from numbers(10) group by number;
----
AggregateFinal
├── output columns: [numbers.number (#0)]
├── group by: [number]
├── aggregate functions: []
├── estimated rows: 10.00
└── AggregatePartial
    ├── group by: [number]
    ├── aggregate functions: []
    ├── estimated rows: 10.00
    └── TableScan
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 10
        ├── read bytes: 80
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 10.00


query T
explain select number from numbers(10) group by 1;
----
AggregateFinal
├── output columns: [numbers.number (#0)]
├── group by: [number]
├── aggregate functions: []
├── estimated rows: 10.00
└── AggregatePartial
    ├── group by: [number]
    ├── aggregate functions: []
    ├── estimated rows: 10.00
    └── TableScan
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 10
        ├── read bytes: 80
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 10.00


query T
explain select 1 from numbers(10) group by 1;
----
EvalScalar
├── output columns: [1 (#2)]
├── expressions: [1]
├── estimated rows: 10.00
└── TableScan
    ├── table: default.system.numbers
    ├── output columns: []
    ├── read rows: 10
    ├── read bytes: 80
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 10.00



query T
explain select 1, number, number + 1, number -1 from numbers(10) group by number, abs(number), cast(number as int);
----
EvalScalar
├── output columns: [numbers.number (#0), 1 (#3), (number + 1) (#4), (number - 1) (#5)]
├── expressions: [1, numbers.number (#0) + 1, numbers.number (#0) - 1]
├── estimated rows: 10.00
└── AggregateFinal
    ├── output columns: [numbers.number (#0)]
    ├── group by: [number]
    ├── aggregate functions: []
    ├── estimated rows: 10.00
    └── AggregatePartial
        ├── group by: [number]
        ├── aggregate functions: []
        ├── estimated rows: 10.00
        └── TableScan
            ├── table: default.system.numbers
            ├── output columns: [number (#0)]
            ├── read rows: 10
            ├── read bytes: 80
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 10.00


query T
explain select count(3), type, name, trim(name) as a from system.columns group by name, type, a, concat(name, trim(name)), concat(type, name), length(name);
----
EvalScalar
├── output columns: [count(3) (#13), columns.name (#0), columns.type (#3), a (#14)]
├── expressions: [trim_both(columns.name (#0), ' ')]
├── estimated rows: 0.00
└── AggregateFinal
    ├── output columns: [count(3) (#13), columns.name (#0), columns.type (#3)]
    ├── group by: [name, type]
    ├── aggregate functions: [count()]
    ├── estimated rows: 0.00
    └── AggregatePartial
        ├── group by: [name, type]
        ├── aggregate functions: [count()]
        ├── estimated rows: 0.00
        └── TableScan
            ├── table: default.system.columns
            ├── output columns: [name (#0), type (#3)]
            ├── read rows: 0
            ├── read bytes: 0
            ├── partitions total: 0
            ├── partitions scanned: 0
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 0.00


statement ok
create table explain_agg_t1(a int not null, b int not null);

query T
explain select a from explain_agg_t1 group by a having 1 = 0;
----
AggregateFinal
├── output columns: [explain_agg_t1.a (#0)]
├── group by: [a]
├── aggregate functions: []
├── estimated rows: 0.00
└── AggregatePartial
    ├── group by: [a]
    ├── aggregate functions: []
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.explain_agg_t1
        ├── output columns: [a (#0)]
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [false], limit: NONE]
        └── estimated rows: 0.00

query T
explain select a from explain_agg_t1 group by a having a > 3;
----
AggregateFinal
├── output columns: [explain_agg_t1.a (#0)]
├── group by: [a]
├── aggregate functions: []
├── estimated rows: 0.00
└── AggregatePartial
    ├── group by: [a]
    ├── aggregate functions: []
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.explain_agg_t1
        ├── output columns: [a (#0)]
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [explain_agg_t1.a (#0) > 3], limit: NONE]
        └── estimated rows: 0.00

query T
explain select a, max(b) from explain_agg_t1 group by a having a > 1;
----
AggregateFinal
├── output columns: [max(b) (#2), explain_agg_t1.a (#0)]
├── group by: [a]
├── aggregate functions: [max(b)]
├── estimated rows: 0.00
└── AggregatePartial
    ├── group by: [a]
    ├── aggregate functions: [max(b)]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.default.explain_agg_t1
        ├── output columns: [a (#0), b (#1)]
        ├── read rows: 0
        ├── read bytes: 0
        ├── partitions total: 0
        ├── partitions scanned: 0
        ├── push downs: [filters: [explain_agg_t1.a (#0) > 1], limit: NONE]
        └── estimated rows: 0.00

query T
explain select a, avg(b) from explain_agg_t1 group by a having a > 1 and max(b) > 10;
----
EvalScalar
├── output columns: [explain_agg_t1.a (#0), (sum(b) / if((count(b) = 0), 1, count(b))) (#4)]
├── expressions: [sum(b) (#2) / CAST(if(CAST(count(b) (#3) = 0 AS Boolean NULL), 1, count(b) (#3)) AS UInt64 NULL)]
├── estimated rows: 0.00
└── Filter
    ├── output columns: [sum(b) (#2), count(b) (#3), explain_agg_t1.a (#0)]
    ├── filters: [is_true(max(b) (#5) > 10)]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── output columns: [sum(b) (#2), count(b) (#3), max(b) (#5), explain_agg_t1.a (#0)]
        ├── group by: [a]
        ├── aggregate functions: [sum(b), count(), max(b)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── group by: [a]
            ├── aggregate functions: [sum(b), count(), max(b)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.default.explain_agg_t1
                ├── output columns: [a (#0), b (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [explain_agg_t1.a (#0) > 1], limit: NONE]
                └── estimated rows: 0.00

query T
explain select a, avg(b) from explain_agg_t1 group by a having a > 1 and max(b) > 10;
----
EvalScalar
├── output columns: [explain_agg_t1.a (#0), (sum(b) / if((count(b) = 0), 1, count(b))) (#4)]
├── expressions: [sum(b) (#2) / CAST(if(CAST(count(b) (#3) = 0 AS Boolean NULL), 1, count(b) (#3)) AS UInt64 NULL)]
├── estimated rows: 0.00
└── Filter
    ├── output columns: [sum(b) (#2), count(b) (#3), explain_agg_t1.a (#0)]
    ├── filters: [is_true(max(b) (#5) > 10)]
    ├── estimated rows: 0.00
    └── AggregateFinal
        ├── output columns: [sum(b) (#2), count(b) (#3), max(b) (#5), explain_agg_t1.a (#0)]
        ├── group by: [a]
        ├── aggregate functions: [sum(b), count(), max(b)]
        ├── estimated rows: 0.00
        └── AggregatePartial
            ├── group by: [a]
            ├── aggregate functions: [sum(b), count(), max(b)]
            ├── estimated rows: 0.00
            └── TableScan
                ├── table: default.default.explain_agg_t1
                ├── output columns: [a (#0), b (#1)]
                ├── read rows: 0
                ├── read bytes: 0
                ├── partitions total: 0
                ├── partitions scanned: 0
                ├── push downs: [filters: [explain_agg_t1.a (#0) > 1], limit: NONE]
                └── estimated rows: 0.00

statement ok
drop table explain_agg_t1;

statement ok
drop table if exists t1

statement ok
create table t1 as select number as a from numbers(10)

statement ok
drop table if exists t2

statement ok
create table t2 as select number as a from numbers(100)

query T
explain select count() from t1, t2 where t1.a > t2.a;
----
AggregateFinal
├── output columns: [count() (#2)]
├── group by: []
├── aggregate functions: [count()]
├── estimated rows: 1.00
└── AggregatePartial
    ├── group by: []
    ├── aggregate functions: [count()]
    ├── estimated rows: 1.00
    └── MergeJoin
        ├── output columns: [t1.a (#0), t2.a (#1)]
        ├── join type: INNER
        ├── range join conditions: [t1.a (#0) "gt" t2.a (#1)]
        ├── other conditions: []
        ├── estimated rows: 1000.00
        ├── TableScan(Left)
        │   ├── table: default.default.t1
        │   ├── output columns: [a (#0)]
        │   ├── read rows: 10
        │   ├── read bytes: 54
        │   ├── partitions total: 1
        │   ├── partitions scanned: 1
        │   ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
        │   ├── push downs: [filters: [], limit: NONE]
        │   └── estimated rows: 10.00
        └── TableScan(Right)
            ├── table: default.default.t2
            ├── output columns: [a (#1)]
            ├── read rows: 100
            ├── read bytes: 414
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1, bloom pruning: 0 to 0>]
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 100.00


statement ok
drop table t1;

statement ok
drop table t2;
