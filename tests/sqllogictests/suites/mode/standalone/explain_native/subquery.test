query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where t.number = (select count(*) from numbers(1) as t2, numbers(1) as t3 where t.number = t2.number)
----
Filter
├── output columns: [t.number (#0)]
├── filters: [is_true(CAST(t.number (#0) AS UInt64 NULL) = if(true, TRY_CAST(scalar_subquery_4 (#4) AS UInt64 NULL), 0))]
├── estimated rows: 0.20
└── HashJoin
    ├── output columns: [t.number (#0), COUNT(*) (#4)]
    ├── join type: INNER
    ├── build keys: [number (#2)]
    ├── probe keys: [number (#0)]
    ├── filters: []
    ├── estimated rows: 1.00
    ├── AggregateFinal(Build)
    │   ├── output columns: [COUNT(*) (#4), t2.number (#2)]
    │   ├── group by: [number]
    │   ├── aggregate functions: [count()]
    │   ├── estimated rows: 1.00
    │   └── AggregatePartial
    │       ├── output columns: [COUNT(*) (#4), #_group_by_key]
    │       ├── group by: [number]
    │       ├── aggregate functions: [count()]
    │       ├── estimated rows: 1.00
    │       └── HashJoin
    │           ├── output columns: [t2.number (#2)]
    │           ├── join type: CROSS
    │           ├── build keys: []
    │           ├── probe keys: []
    │           ├── filters: []
    │           ├── estimated rows: 1.00
    │           ├── TableScan(Build)
    │           │   ├── table: default.system.numbers
    │           │   ├── output columns: []
    │           │   ├── read rows: 1
    │           │   ├── read bytes: 8
    │           │   ├── partitions total: 1
    │           │   ├── partitions scanned: 1
    │           │   ├── push downs: [filters: [], limit: NONE]
    │           │   └── estimated rows: 1.00
    │           └── TableScan(Probe)
    │               ├── table: default.system.numbers
    │               ├── output columns: [number (#2)]
    │               ├── read rows: 1
    │               ├── read bytes: 8
    │               ├── partitions total: 1
    │               ├── partitions scanned: 1
    │               ├── push downs: [filters: [], limit: NONE]
    │               └── estimated rows: 1.00
    └── HashJoin(Probe)
        ├── output columns: [t.number (#0)]
        ├── join type: CROSS
        ├── build keys: []
        ├── probe keys: []
        ├── filters: []
        ├── estimated rows: 1.00
        ├── TableScan(Build)
        │   ├── table: default.system.numbers
        │   ├── output columns: []
        │   ├── read rows: 1
        │   ├── read bytes: 8
        │   ├── partitions total: 1
        │   ├── partitions scanned: 1
        │   ├── push downs: [filters: [], limit: NONE]
        │   └── estimated rows: 1.00
        └── TableScan(Probe)
            ├── table: default.system.numbers
            ├── output columns: [number (#0)]
            ├── read rows: 1
            ├── read bytes: 8
            ├── partitions total: 1
            ├── partitions scanned: 1
            ├── push downs: [filters: [], limit: NONE]
            └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t where exists (select t1.number from numbers(1) as t1 where t.number = t1.number) or t.number > 1
----
Filter
├── output columns: [t.number (#0)]
├── filters: [is_true(2 (#2) OR CAST(t.number (#0) > 1 AS Boolean NULL))]
├── estimated rows: 1.00
└── HashJoin
    ├── output columns: [t.number (#0), marker (#2)]
    ├── join type: RIGHT MARK
    ├── build keys: [number (#1)]
    ├── probe keys: [number (#0)]
    ├── filters: []
    ├── estimated rows: 1.00
    ├── TableScan(Build)
    │   ├── table: default.system.numbers
    │   ├── output columns: [number (#1)]
    │   ├── read rows: 1
    │   ├── read bytes: 8
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 1
        ├── read bytes: 8
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t where exists (select * from numbers(1) where number = 0)
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: CROSS
├── build keys: []
├── probe keys: []
├── filters: []
├── estimated rows: 0.00
├── Filter(Build)
│   ├── output columns: []
│   ├── filters: [count(*) (#2) = 1]
│   ├── estimated rows: 0.00
│   └── AggregateFinal
│       ├── output columns: [count(*) (#2)]
│       ├── group by: []
│       ├── aggregate functions: [count()]
│       ├── estimated rows: 1.00
│       └── AggregatePartial
│           ├── output columns: [count(*) (#2)]
│           ├── group by: []
│           ├── aggregate functions: [count()]
│           ├── estimated rows: 1.00
│           └── Limit
│               ├── output columns: []
│               ├── limit: 1
│               ├── offset: 0
│               ├── estimated rows: 0.00
│               └── Filter
│                   ├── output columns: []
│                   ├── filters: [numbers.number (#1) = 0]
│                   ├── estimated rows: 0.00
│                   └── TableScan
│                       ├── table: default.system.numbers
│                       ├── output columns: [number (#1)]
│                       ├── read rows: 1
│                       ├── read bytes: 8
│                       ├── partitions total: 1
│                       ├── partitions scanned: 1
│                       ├── push downs: [filters: [numbers.number (#1) = 0], limit: NONE]
│                       └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t where number = (select * from numbers(1) where number = 0)
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: INNER
├── build keys: [_if_scalar_subquery (#4)]
├── probe keys: [CAST(t.number (#0) AS UInt64 NULL)]
├── filters: []
├── estimated rows: 1.00
├── EvalScalar(Build)
│   ├── output columns: [_if_scalar_subquery (#4)]
│   ├── expressions: [if(CAST(_count_scalar_subquery (#2) = 0 AS Boolean NULL), NULL, _any_scalar_subquery (#3))]
│   ├── estimated rows: 1.00
│   └── Limit
│       ├── output columns: [_count_scalar_subquery (#2), _any_scalar_subquery (#3)]
│       ├── limit: 1
│       ├── offset: 0
│       ├── estimated rows: 1.00
│       └── AggregateFinal
│           ├── output columns: [_count_scalar_subquery (#2), _any_scalar_subquery (#3)]
│           ├── group by: []
│           ├── aggregate functions: [count(), any(number)]
│           ├── limit: 1
│           ├── estimated rows: 1.00
│           └── AggregatePartial
│               ├── output columns: [_count_scalar_subquery (#2), _any_scalar_subquery (#3)]
│               ├── group by: []
│               ├── aggregate functions: [count(), any(number)]
│               ├── estimated rows: 1.00
│               └── Filter
│                   ├── output columns: [numbers.number (#1)]
│                   ├── filters: [numbers.number (#1) = 0]
│                   ├── estimated rows: 0.00
│                   └── TableScan
│                       ├── table: default.system.numbers
│                       ├── output columns: [number (#1)]
│                       ├── read rows: 1
│                       ├── read bytes: 8
│                       ├── partitions total: 1
│                       ├── partitions scanned: 1
│                       ├── push downs: [filters: [numbers.number (#1) = 0], limit: NONE]
│                       └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number)
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: LEFT SEMI
├── build keys: [numbers.number (#1)]
├── probe keys: [t.number (#0)]
├── filters: []
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#1)]
│   ├── read rows: 1
│   ├── read bytes: 8
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t where not exists (select * from numbers(1) where number = t.number)
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: LEFT ANTI
├── build keys: [numbers.number (#1)]
├── probe keys: [t.number (#0)]
├── filters: []
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#1)]
│   ├── read rows: 1
│   ├── read bytes: 8
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select * from numbers(1) as t where exists (select number as a from numbers(1) where number = t.number)
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: LEFT SEMI
├── build keys: [numbers.number (#1)]
├── probe keys: [t.number (#0)]
├── filters: []
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#1)]
│   ├── read rows: 1
│   ├── read bytes: 8
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number and number = 0 and t.number < 10)
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: LEFT SEMI
├── build keys: [numbers.number (#1)]
├── probe keys: [t.number (#0)]
├── filters: []
├── estimated rows: 0.00
├── Filter(Build)
│   ├── output columns: [numbers.number (#1)]
│   ├── filters: [numbers.number (#1) < 10, numbers.number (#1) = 0]
│   ├── estimated rows: 0.00
│   └── TableScan
│       ├── table: default.system.numbers
│       ├── output columns: [number (#1)]
│       ├── read rows: 1
│       ├── read bytes: 8
│       ├── partitions total: 1
│       ├── partitions scanned: 1
│       ├── push downs: [filters: [and_filters(and_filters(numbers.number (#1) = 0, numbers.number (#1) < 10), numbers.number (#1) = 0)], limit: NONE]
│       └── estimated rows: 1.00
└── Filter(Probe)
    ├── output columns: [t.number (#0)]
    ├── filters: [t.number (#0) < 10]
    ├── estimated rows: 0.00
    └── TableScan
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 1
        ├── read bytes: 8
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [numbers.number (#0) < 10], limit: NONE]
        └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t where exists (select * from numbers(1) where number = t.number and t.number < number)
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: LEFT SEMI
├── build keys: [numbers.number (#1)]
├── probe keys: [t.number (#0)]
├── filters: [t.number (#0) < numbers.number (#1)]
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#1)]
│   ├── read rows: 1
│   ├── read bytes: 8
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t where exists (select number as a, number as b, number as c from numbers(1) where number = t.number)
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: LEFT SEMI
├── build keys: [numbers.number (#1)]
├── probe keys: [t.number (#0)]
├── filters: []
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#1)]
│   ├── read rows: 1
│   ├── read bytes: 8
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── TableScan(Probe)
    ├── table: default.system.numbers
    ├── output columns: [number (#0)]
    ├── read rows: 1
    ├── read bytes: 8
    ├── partitions total: 1
    ├── partitions scanned: 1
    ├── push downs: [filters: [], limit: NONE]
    └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t, numbers(1) as t1 where (select count(*) = 1 from numbers(1) where t.number = number) and t.number = t1.number
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: INNER
├── build keys: [number (#2)]
├── probe keys: [number (#0)]
├── filters: []
├── estimated rows: 0.20
├── Filter(Build)
│   ├── output columns: [numbers.number (#2)]
│   ├── filters: [is_true(try_to_boolean(if(true, TRY_CAST(COUNT(*) (#3) = 1 AS UInt64 NULL), 0)))]
│   ├── estimated rows: 0.20
│   └── AggregateFinal
│       ├── output columns: [COUNT(*) (#3), numbers.number (#2)]
│       ├── group by: [number]
│       ├── aggregate functions: [count()]
│       ├── estimated rows: 1.00
│       └── AggregatePartial
│           ├── output columns: [COUNT(*) (#3), #_group_by_key]
│           ├── group by: [number]
│           ├── aggregate functions: [count()]
│           ├── estimated rows: 1.00
│           └── TableScan
│               ├── table: default.system.numbers
│               ├── output columns: [number (#2)]
│               ├── read rows: 1
│               ├── read bytes: 8
│               ├── partitions total: 1
│               ├── partitions scanned: 1
│               ├── push downs: [filters: [], limit: NONE]
│               └── estimated rows: 1.00
└── HashJoin(Probe)
    ├── output columns: [t.number (#0)]
    ├── join type: INNER
    ├── build keys: [t1.number (#1)]
    ├── probe keys: [t.number (#0)]
    ├── filters: []
    ├── estimated rows: 1.00
    ├── TableScan(Build)
    │   ├── table: default.system.numbers
    │   ├── output columns: [number (#1)]
    │   ├── read rows: 1
    │   ├── read bytes: 8
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 1
        ├── read bytes: 8
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 1.00

query T
explain select t.number from numbers(1) as t where exists(select * from numbers(1) as t1 where t.number > t1.number) and not exists(select * from numbers(1) as t1 where t.number < t1.number)
----
HashJoin
├── output columns: [t.number (#0)]
├── join type: LEFT ANTI
├── build keys: []
├── probe keys: []
├── filters: [t.number (#0) < t1.number (#2)]
├── estimated rows: 1.00
├── TableScan(Build)
│   ├── table: default.system.numbers
│   ├── output columns: [number (#2)]
│   ├── read rows: 1
│   ├── read bytes: 8
│   ├── partitions total: 1
│   ├── partitions scanned: 1
│   ├── push downs: [filters: [], limit: NONE]
│   └── estimated rows: 1.00
└── HashJoin(Probe)
    ├── output columns: [t.number (#0)]
    ├── join type: LEFT SEMI
    ├── build keys: []
    ├── probe keys: []
    ├── filters: [t.number (#0) > t1.number (#1)]
    ├── estimated rows: 1.00
    ├── TableScan(Build)
    │   ├── table: default.system.numbers
    │   ├── output columns: [number (#1)]
    │   ├── read rows: 1
    │   ├── read bytes: 8
    │   ├── partitions total: 1
    │   ├── partitions scanned: 1
    │   ├── push downs: [filters: [], limit: NONE]
    │   └── estimated rows: 1.00
    └── TableScan(Probe)
        ├── table: default.system.numbers
        ├── output columns: [number (#0)]
        ├── read rows: 1
        ├── read bytes: 8
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 1.00

statement ok
drop table if exists t;

statement ok
create table t (i int);

statement ok
insert into t values(1), (2), (3), (null);

query T
explain select i, exists(select * from t where i > 10) from t;
----
EvalScalar
├── output columns: [t.i (#0), exists (select * from t where i > 10) (#2)]
├── expressions: [exists_scalar (#4)]
├── estimated rows: 4.00
└── HashJoin
    ├── output columns: [t.i (#0), _exists_scalar_subquery (#4)]
    ├── join type: CROSS
    ├── build keys: []
    ├── probe keys: []
    ├── filters: []
    ├── estimated rows: 4.00
    ├── EvalScalar(Build)
    │   ├── output columns: [_exists_scalar_subquery (#4)]
    │   ├── expressions: [count(*) (#3) = 1]
    │   ├── estimated rows: 1.00
    │   └── AggregateFinal
    │       ├── output columns: [count(*) (#3)]
    │       ├── group by: []
    │       ├── aggregate functions: [count()]
    │       ├── estimated rows: 1.00
    │       └── AggregatePartial
    │           ├── group by: []
    │           ├── aggregate functions: [count()]
    │           ├── estimated rows: 1.00
    │           └── Limit
    │               ├── output columns: []
    │               ├── limit: 1
    │               ├── offset: 0
    │               ├── estimated rows: 0.00
    │               └── TableScan
    │                   ├── table: default.default.t
    │                   ├── output columns: []
    │                   ├── read rows: 0
    │                   ├── read size: 0
    │                   ├── partitions total: 1
    │                   ├── partitions scanned: 0
    │                   ├── pruning stats: [segments: <range pruning: 1 to 0>]
    │                   ├── push downs: [filters: [is_true(t.i (#1) > 10)], limit: 1]
    │                   └── estimated rows: 0.00
    └── TableScan(Probe)
        ├── table: default.default.t
        ├── output columns: [i (#0)]
        ├── read rows: 4
        ├── read size: < 1 KiB
        ├── partitions total: 1
        ├── partitions scanned: 1
        ├── pruning stats: [segments: <range pruning: 1 to 1>, blocks: <range pruning: 1 to 1>]
        ├── push downs: [filters: [], limit: NONE]
        └── estimated rows: 4.00

statement ok
drop table if exists t;
