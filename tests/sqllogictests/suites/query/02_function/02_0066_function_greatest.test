statement ok
DROP DATABASE IF EXISTS greatest_func_test

statement ok
CREATE DATABASE IF NOT EXISTS greatest_func_test

statement ok
USE greatest_func_test

statement ok
DROP TABLE IF EXISTS products

statement ok
CREATE TABLE products (id INT, name VARCHAR, category INT, price DECIMAL(10, 2), member_price DECIMAL(10, 2) COMMENT 'Special price for members', rating INT COMMENT 'Customer rating ranges between 1 to 5') 

statement ok
INSERT INTO products VALUES(1, 'Product 1', 0, 100.00,  90.00, 3),(2, 'Product 2', 1, 150.00, 120.00, 4),(3, 'Product 3', 0, 200.00, 190.00, 5),(4, 'Product 4', 2, 250.00, 210.00, 2),(5, 'Product 5', 1, 300.00, 150.00, 1)

query T
SELECT GREATEST(price,member_price) FROM products
----
100.00
150.00
200.00
250.00
300.00

query T
SELECT LEAST(price,member_price) FROM products
----
90.00
120.00
190.00
210.00
150.00

query ITITITT
SELECT id, name, category, price, rating,
       CASE
         WHEN rating = 1 THEN 0.02
         WHEN rating = 2 THEN 0.04
         WHEN rating = 3 THEN 0.06
         WHEN rating = 4 THEN 0.08
         ELSE 0.1
       END AS increase_percentage_based_on_rating,
       rank() OVER (PARTITION BY category ORDER BY rating) AS rating_rank,
       CASE
         WHEN rating_rank = 1 THEN 0.2
         WHEN rating_rank = 2 THEN 0.1
         ELSE 0
       END AS increase_percentage_based_on_rank,
       GREATEST(increase_percentage_based_on_rating, 
                increase_percentage_based_on_rank) AS final_increase_percentage,
       CAST(price * (1 + final_increase_percentage) AS DECIMAL(10, 2))
         AS adjusted_price
FROM products order by rating, id, name;
----
5 Product 5 1 300.00 1 0.02 1 0.2 0.20 360.00
4 Product 4 2 250.00 2 0.04 1 0.2 0.20 300.00
1 Product 1 0 100.00 3 0.06 1 0.2 0.20 120.00
2 Product 2 1 150.00 4 0.08 2 0.1 0.10 165.00
3 Product 3 0 200.00 5 0.10 2 0.1 0.10 220.00

query I
SELECT GREATEST(1,2)
----
2

query ?
SELECT GREATEST(1.0,2.0)
----
2.0

query I
SELECT LEAST(1,2)
----
1

query ?
SELECT LEAST(1.0,2.0)
----
1.0

statement ok
DROP DATABASE greatest_func_test
